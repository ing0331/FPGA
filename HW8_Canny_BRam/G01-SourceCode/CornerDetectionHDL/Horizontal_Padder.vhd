-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CornerDetectionHDL\Horizontal_Padder.vhd
-- Created: 2023-06-21 14:30:33
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Horizontal_Padder
-- Source Path: CornerDetectionHDL/HDL Corner Algorithm/Corner Detector/LineBuffer/Horizontal Padder
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_Corner_Algorithm_pkg.ALL;

ENTITY Horizontal_Padder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataVectorIn                      :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        horPadCount                       :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        padShift                          :   IN    std_logic;
        dataVector                        :   OUT   vector_of_std_logic_vector8(0 TO 2)  -- uint8 [3]
        );
END Horizontal_Padder;


ARCHITECTURE rtl OF Horizontal_Padder IS

  -- Signals
  SIGNAL horPadCount_unsigned             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL dataVectorIn_unsigned            : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn1                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn1_1                     : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn2                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn2_0                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DataMuxIn2_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL DataMuxIn2_2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_out_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_1_reg                   : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL intdelay_out_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_out_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_1_reg_1                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL intdelay_1_reg_2                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL DataMuxIn3                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL intdelay_out_1_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_1_reg_3                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL intdelay_out_2_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_out_3_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL intdelay_1_reg_4                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL intdelay_1_reg_5                 : vector_of_unsigned8(0 TO 1);  -- ufix8 [2]
  SIGNAL DataMuxIn4                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL dataVector_tmp                   : vector_of_unsigned8(0 TO 2);  -- uint8 [3]

BEGIN
  horPadCount_unsigned <= unsigned(horPadCount);

  outputgen1: FOR k IN 0 TO 2 GENERATE
    dataVectorIn_unsigned(k) <= unsigned(dataVectorIn(k));
  END GENERATE;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn1 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn1 <= dataVectorIn_unsigned;
      END IF;
    END IF;
  END PROCESS reg_process;


  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn1_1 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn1_1 <= DataMuxIn1;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn2 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn2 <= DataMuxIn1_1;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  DataMuxIn2_0 <= DataMuxIn2(0);

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_1_reg <= (OTHERS => to_unsigned(16#00#, 8));
        intdelay_1_reg_1 <= (OTHERS => to_unsigned(16#00#, 8));
        intdelay_1_reg_2 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' AND padShift = '1' THEN
        intdelay_1_reg(0) <= DataMuxIn2_0;
        intdelay_1_reg(1) <= intdelay_1_reg(0);
        intdelay_1_reg_1(0) <= DataMuxIn2_1;
        intdelay_1_reg_1(1) <= intdelay_1_reg_1(0);
        intdelay_1_reg_2(0) <= DataMuxIn2_2;
        intdelay_1_reg_2(1) <= intdelay_1_reg_2(0);
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  intdelay_out_1 <= intdelay_1_reg(1);
  intdelay_out_2 <= intdelay_1_reg_1(1);
  intdelay_out_3 <= intdelay_1_reg_2(1);

  DataMuxIn2_1 <= DataMuxIn2(1);

  DataMuxIn2_2 <= DataMuxIn2(2);

  DataMuxIn3(0) <= intdelay_out_1;
  DataMuxIn3(1) <= intdelay_out_2;
  DataMuxIn3(2) <= intdelay_out_3;

  intdelay_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_1_reg_3 <= (OTHERS => to_unsigned(16#00#, 8));
        intdelay_1_reg_4 <= (OTHERS => to_unsigned(16#00#, 8));
        intdelay_1_reg_5 <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' AND padShift = '1' THEN
        intdelay_1_reg_3(0) <= intdelay_out_1;
        intdelay_1_reg_3(1) <= intdelay_1_reg_3(0);
        intdelay_1_reg_4(0) <= intdelay_out_2;
        intdelay_1_reg_4(1) <= intdelay_1_reg_4(0);
        intdelay_1_reg_5(0) <= intdelay_out_3;
        intdelay_1_reg_5(1) <= intdelay_1_reg_5(0);
      END IF;
    END IF;
  END PROCESS intdelay_1_1_process;

  intdelay_out_1_1 <= intdelay_1_reg_3(1);
  intdelay_out_2_1 <= intdelay_1_reg_4(1);
  intdelay_out_3_1 <= intdelay_1_reg_5(1);

  DataMuxIn4(0) <= intdelay_out_1_1;
  DataMuxIn4(1) <= intdelay_out_2_1;
  DataMuxIn4(2) <= intdelay_out_3_1;

  mux_output : PROCESS (DataMuxIn1, DataMuxIn1_1, DataMuxIn2, DataMuxIn3, DataMuxIn4,
       horPadCount_unsigned)
  BEGIN
    IF horPadCount_unsigned = to_unsigned(16#000#, 11) THEN 
      dataVector_tmp <= DataMuxIn1;
    ELSIF horPadCount_unsigned = to_unsigned(16#001#, 11) THEN 
      dataVector_tmp <= DataMuxIn1_1;
    ELSIF horPadCount_unsigned = to_unsigned(16#002#, 11) THEN 
      dataVector_tmp <= DataMuxIn2;
    ELSIF horPadCount_unsigned = to_unsigned(16#003#, 11) THEN 
      dataVector_tmp <= DataMuxIn3;
    ELSE 
      dataVector_tmp <= DataMuxIn4;
    END IF;
  END PROCESS mux_output;


  outputgen: FOR k IN 0 TO 2 GENERATE
    dataVector(k) <= std_logic_vector(dataVector_tmp(k));
  END GENERATE;

END rtl;

