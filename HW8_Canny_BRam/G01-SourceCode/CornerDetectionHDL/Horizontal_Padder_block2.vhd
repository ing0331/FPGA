-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CornerDetectionHDL\Horizontal_Padder_block2.vhd
-- Created: 2023-06-21 14:30:33
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Horizontal_Padder_block2
-- Source Path: CornerDetectionHDL/HDL Corner Algorithm/Corner Detector/HarrisCore/HarrisFilterC/LineBuffer/Horizontal 
-- Padde
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_Corner_Algorithm_pkg.ALL;

ENTITY Horizontal_Padder_block2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataVectorIn                      :   IN    vector_of_std_logic_vector20(0 TO 4);  -- sfix20 [5]
        horPadCount                       :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        padShift                          :   IN    std_logic;
        dataVector                        :   OUT   vector_of_std_logic_vector20(0 TO 4)  -- sfix20 [5]
        );
END Horizontal_Padder_block2;


ARCHITECTURE rtl OF Horizontal_Padder_block2 IS

  -- Signals
  SIGNAL horPadCount_unsigned             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL dataVectorIn_signed              : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL DataMuxIn1                       : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL DataMuxIn2                       : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL DataMuxIn3                       : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL DataMuxIn4                       : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL DataMuxIn5                       : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL DataMuxIn6                       : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL dataVector_tmp                   : vector_of_signed20(0 TO 4);  -- sfix20 [5]

BEGIN
  horPadCount_unsigned <= unsigned(horPadCount);

  outputgen1: FOR k IN 0 TO 4 GENERATE
    dataVectorIn_signed(k) <= signed(dataVectorIn(k));
  END GENERATE;

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn1 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn1 <= dataVectorIn_signed;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn2 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn2 <= DataMuxIn1;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn3 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn3 <= DataMuxIn2;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn4 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn4 <= DataMuxIn3;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  intdelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn5 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn5 <= DataMuxIn4;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        DataMuxIn6 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND padShift = '1' THEN
        DataMuxIn6 <= DataMuxIn5;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  mux_output : PROCESS (DataMuxIn1, DataMuxIn2, DataMuxIn3, DataMuxIn4, DataMuxIn5, DataMuxIn6,
       dataVectorIn_signed, horPadCount_unsigned)
  BEGIN
    IF horPadCount_unsigned = to_unsigned(16#000#, 11) THEN 
      dataVector_tmp <= dataVectorIn_signed;
    ELSIF horPadCount_unsigned = to_unsigned(16#001#, 11) THEN 
      dataVector_tmp <= DataMuxIn1;
    ELSIF horPadCount_unsigned = to_unsigned(16#002#, 11) THEN 
      dataVector_tmp <= DataMuxIn2;
    ELSIF horPadCount_unsigned = to_unsigned(16#003#, 11) THEN 
      dataVector_tmp <= DataMuxIn3;
    ELSIF horPadCount_unsigned = to_unsigned(16#004#, 11) THEN 
      dataVector_tmp <= DataMuxIn4;
    ELSIF horPadCount_unsigned = to_unsigned(16#005#, 11) THEN 
      dataVector_tmp <= DataMuxIn5;
    ELSE 
      dataVector_tmp <= DataMuxIn6;
    END IF;
  END PROCESS mux_output;


  outputgen: FOR k IN 0 TO 4 GENERATE
    dataVector(k) <= std_logic_vector(dataVector_tmp(k));
  END GENERATE;

END rtl;

