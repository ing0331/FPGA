-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CornerDetectionHDL\Pixel_Stream_Aligner.vhd
-- Created: 2023-06-21 14:30:33
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Pixel_Stream_Aligner
-- Source Path: CornerDetectionHDL/HDL Corner Algorithm/Pixel Stream Aligner
-- Hierarchy Level: 1
-- 
-- Pixel Stream Aligner
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_Corner_Algorithm_pkg.ALL;

ENTITY Pixel_Stream_Aligner IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in0                               :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        in1_hStart                        :   IN    std_logic;
        in1_hEnd                          :   IN    std_logic;
        in1_vStart                        :   IN    std_logic;
        in1_vEnd                          :   IN    std_logic;
        in1_valid                         :   IN    std_logic;
        in2                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        in3_hStart                        :   IN    std_logic;
        in3_hEnd                          :   IN    std_logic;
        in3_vStart                        :   IN    std_logic;
        in3_vEnd                          :   IN    std_logic;
        in3_valid                         :   IN    std_logic;
        out0                              :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        out1                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        out2_hStart                       :   OUT   std_logic;
        out2_hEnd                         :   OUT   std_logic;
        out2_vStart                       :   OUT   std_logic;
        out2_vEnd                         :   OUT   std_logic;
        out2_valid                        :   OUT   std_logic
        );
END Pixel_Stream_Aligner;


ARCHITECTURE rtl OF Pixel_Stream_Aligner IS

  -- Component Declarations
  COMPONENT SimpleDualPortRAM_generic_block
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : SimpleDualPortRAM_generic_block
    USE ENTITY work.SimpleDualPortRAM_generic_block(rtl);

  -- Signals
  SIGNAL refValidInReg                    : std_logic;  -- ufix1
  SIGNAL refvaldlyline_reg                : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL pixelValidPreReg                 : std_logic;  -- ufix1
  SIGNAL rvalOReg_reg                     : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL pixelValidOutReg                 : std_logic;  -- ufix1
  SIGNAL refVEndInReg                     : std_logic;  -- ufix1
  SIGNAL refvedlyline_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL pixelVEndPreReg                  : std_logic;  -- ufix1
  SIGNAL refvEndInv                       : std_logic;  -- ufix1
  SIGNAL refVStartInReg                   : std_logic;  -- ufix1
  SIGNAL refvsdlyline_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL pixelVStartPreReg                : std_logic;  -- ufix1
  SIGNAL refinFrame2Term                  : std_logic;  -- ufix1
  SIGNAL refValidInv                      : std_logic;  -- ufix1
  SIGNAL refinFrame                       : std_logic;  -- ufix1
  SIGNAL refinFrame3Term                  : std_logic;  -- ufix1
  SIGNAL refinFrameNext                   : std_logic;  -- ufix1
  SIGNAL refinFrame1Term                  : std_logic;  -- ufix1
  SIGNAL refinFrameInv                    : std_logic;  -- ufix1
  SIGNAL refnewFrame                      : std_logic;  -- ufix1
  SIGNAL pixelVEndInReg                   : std_logic;  -- ufix1
  SIGNAL pixelvEndInv                     : std_logic;  -- ufix1
  SIGNAL pixelValidInReg                  : std_logic;  -- ufix1
  SIGNAL pixelVStartInReg                 : std_logic;  -- ufix1
  SIGNAL pixelinFrame2Term                : std_logic;  -- ufix1
  SIGNAL pixelValidInv                    : std_logic;  -- ufix1
  SIGNAL pixelinFrame                     : std_logic;  -- ufix1
  SIGNAL pixelinFrame3Term                : std_logic;  -- ufix1
  SIGNAL pixelinFrameNext                 : std_logic;  -- ufix1
  SIGNAL pixelinFrame1Term                : std_logic;  -- ufix1
  SIGNAL pixelinFrameInv                  : std_logic;  -- ufix1
  SIGNAL pixelnewFrame                    : std_logic;  -- ufix1
  SIGNAL trueconst                        : std_logic;  -- ufix1
  SIGNAL frameStartValid                  : std_logic;  -- ufix1
  SIGNAL refFrameValid                    : std_logic;  -- ufix1
  SIGNAL pixelOutValid                    : std_logic;  -- ufix1
  SIGNAL pixzeroconst                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_0                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelInReg1comp                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL RAMwtone                         : std_logic;  -- ufix1
  SIGNAL pixelHEndInReg                   : std_logic;  -- ufix1
  SIGNAL pixelhEndInv                     : std_logic;  -- ufix1
  SIGNAL pixelHStartInReg                 : std_logic;  -- ufix1
  SIGNAL pixelinLine2Term                 : std_logic;  -- ufix1
  SIGNAL pixelinLine                      : std_logic;  -- ufix1
  SIGNAL pixelinLineInv                   : std_logic;  -- ufix1
  SIGNAL pixelinLine6Term                 : std_logic;  -- ufix1
  SIGNAL pixelinLine5Term                 : std_logic;  -- ufix1
  SIGNAL pixelinLine4Term                 : std_logic;  -- ufix1
  SIGNAL pixelinLine3Term                 : std_logic;  -- ufix1
  SIGNAL pixelinLine1Term                 : std_logic;  -- ufix1
  SIGNAL pixelinLineNext                  : std_logic;  -- ufix1
  SIGNAL pixelnewLine                     : std_logic;  -- ufix1
  SIGNAL RAMwttwo                         : std_logic;  -- ufix1
  SIGNAL RAMwren                          : std_logic;  -- ufix1
  SIGNAL RAMwraddr                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL ramrdframe                       : std_logic;  -- ufix1
  SIGNAL refHEndInReg                     : std_logic;  -- ufix1
  SIGNAL refhedlyline_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL pixelHEndPreReg                  : std_logic;  -- ufix1
  SIGNAL refhEndInv                       : std_logic;  -- ufix1
  SIGNAL refHStartInReg                   : std_logic;  -- ufix1
  SIGNAL refhsdlyline_reg                 : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL pixelHStartPreReg                : std_logic;  -- ufix1
  SIGNAL refinLine2Term                   : std_logic;  -- ufix1
  SIGNAL refinLine                        : std_logic;  -- ufix1
  SIGNAL refinLineInv                     : std_logic;  -- ufix1
  SIGNAL refinLine6Term                   : std_logic;  -- ufix1
  SIGNAL refinLine5Term                   : std_logic;  -- ufix1
  SIGNAL refinLine4Term                   : std_logic;  -- ufix1
  SIGNAL refinLine3Term                   : std_logic;  -- ufix1
  SIGNAL refinLineNext                    : std_logic;  -- ufix1
  SIGNAL refinLine1Term                   : std_logic;  -- ufix1
  SIGNAL refnewLine                       : std_logic;  -- ufix1
  SIGNAL refNewFrameInv                   : std_logic;  -- ufix1
  SIGNAL refNewLineNotFrame               : std_logic;  -- ufix1
  SIGNAL linerden                         : std_logic;  -- ufix1
  SIGNAL linerdaddr                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL linerd0addrdecode                : std_logic;  -- ufix1
  SIGNAL pixelNewFrameInv                 : std_logic;  -- ufix1
  SIGNAL pixelNewLineNotFrame             : std_logic;  -- ufix1
  SIGNAL linewr0addr                      : std_logic;  -- ufix1
  SIGNAL linewr1addr                      : std_logic;  -- ufix1
  SIGNAL linewr2addr                      : std_logic;  -- ufix1
  SIGNAL linewr3addr                      : std_logic;  -- ufix1
  SIGNAL linewr4addr                      : std_logic;  -- ufix1
  SIGNAL linewr5addr                      : std_logic;  -- ufix1
  SIGNAL linewr6addr                      : std_logic;  -- ufix1
  SIGNAL linewr7addr                      : std_logic;  -- ufix1
  SIGNAL linewr8addr                      : std_logic;  -- ufix1
  SIGNAL linewr9addr                      : std_logic;  -- ufix1
  SIGNAL wr0gate                          : std_logic;  -- ufix1
  SIGNAL line0StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd1addrdecode                : std_logic;  -- ufix1
  SIGNAL wr1gate                          : std_logic;  -- ufix1
  SIGNAL line1StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd2addrdecode                : std_logic;  -- ufix1
  SIGNAL wr2gate                          : std_logic;  -- ufix1
  SIGNAL line2StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd3addrdecode                : std_logic;  -- ufix1
  SIGNAL wr3gate                          : std_logic;  -- ufix1
  SIGNAL line3StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd4addrdecode                : std_logic;  -- ufix1
  SIGNAL wr4gate                          : std_logic;  -- ufix1
  SIGNAL line4StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd5addrdecode                : std_logic;  -- ufix1
  SIGNAL wr5gate                          : std_logic;  -- ufix1
  SIGNAL line5StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd6addrdecode                : std_logic;  -- ufix1
  SIGNAL wr6gate                          : std_logic;  -- ufix1
  SIGNAL line6StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd7addrdecode                : std_logic;  -- ufix1
  SIGNAL wr7gate                          : std_logic;  -- ufix1
  SIGNAL line7StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd8addrdecode                : std_logic;  -- ufix1
  SIGNAL wr8gate                          : std_logic;  -- ufix1
  SIGNAL line8StartsValidNext             : std_logic;  -- ufix1
  SIGNAL linerd9addrdecode                : std_logic;  -- ufix1
  SIGNAL wr9gate                          : std_logic;  -- ufix1
  SIGNAL line9StartsValidNext             : std_logic;  -- ufix1
  SIGNAL RAMrdload                        : std_logic;  -- ufix1
  SIGNAL rd9gate                          : std_logic;  -- ufix1
  SIGNAL line9StartsEn                    : std_logic;  -- ufix1
  SIGNAL line9StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd8gate                          : std_logic;  -- ufix1
  SIGNAL line8StartsEn                    : std_logic;  -- ufix1
  SIGNAL line8StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd7gate                          : std_logic;  -- ufix1
  SIGNAL line7StartsEn                    : std_logic;  -- ufix1
  SIGNAL line7StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd6gate                          : std_logic;  -- ufix1
  SIGNAL line6StartsEn                    : std_logic;  -- ufix1
  SIGNAL line6StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd5gate                          : std_logic;  -- ufix1
  SIGNAL line5StartsEn                    : std_logic;  -- ufix1
  SIGNAL line5StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd4gate                          : std_logic;  -- ufix1
  SIGNAL line4StartsEn                    : std_logic;  -- ufix1
  SIGNAL line4StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd3gate                          : std_logic;  -- ufix1
  SIGNAL line3StartsEn                    : std_logic;  -- ufix1
  SIGNAL line3StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd2gate                          : std_logic;  -- ufix1
  SIGNAL line2StartsEn                    : std_logic;  -- ufix1
  SIGNAL line2StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd1gate                          : std_logic;  -- ufix1
  SIGNAL line1StartsEn                    : std_logic;  -- ufix1
  SIGNAL line1StartsValid                 : std_logic;  -- ufix1
  SIGNAL rd0gate                          : std_logic;  -- ufix1
  SIGNAL line0StartsEn                    : std_logic;  -- ufix1
  SIGNAL line0StartsValid                 : std_logic;  -- ufix1
  SIGNAL linerdvalid                      : std_logic;  -- ufix1
  SIGNAL ramrdline                        : std_logic;  -- ufix1
  SIGNAL line0Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line1Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line2Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line3Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line4Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line5Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line6Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line7Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line8Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL line9Starts                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL linerddata                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL frameStart                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL RAMrdloadval                     : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL refEarlyInFrame                  : std_logic;  -- ufix1
  SIGNAL refEarlyInLine                   : std_logic;  -- ufix1
  SIGNAL constone                         : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL RAMrdaddr                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL RAMrdnextaddr                    : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL relop_relop1                     : std_logic;
  SIGNAL notholdaddr                      : std_logic;  -- ufix1
  SIGNAL RAMrden                          : std_logic;  -- ufix1
  SIGNAL RAMrddata1comp                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL RAMrddata1comp_unsigned          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelOutReg1comp                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelRegOutMux1comp              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelInReg2comp                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL RAMrddata2comp                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL RAMrddata2comp_unsigned          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelOutReg2comp                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelRegOutMux2comp              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelInReg3comp                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL RAMrddata3comp                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL RAMrddata3comp_unsigned          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelOutReg3comp                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelRegOutMux3comp              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelOut                         : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL refzeroconst_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL in2_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL refpixelInReg                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL refpixdlyline_reg                : vector_of_unsigned8(0 TO 7);  -- ufix8 [8]
  SIGNAL refpixeldly                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL refpixelOutReg                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL refPixelOut                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL rhSOReg_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL pixelHStartOutReg                : std_logic;  -- ufix1
  SIGNAL hStartOut                        : std_logic;
  SIGNAL rhEOReg_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL pixelHEndOutReg                  : std_logic;  -- ufix1
  SIGNAL hEndOut                          : std_logic;
  SIGNAL rvSOReg_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL pixelVStartOutReg                : std_logic;  -- ufix1
  SIGNAL vStartOut                        : std_logic;
  SIGNAL rvEOReg_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL pixelVEndOutReg                  : std_logic;  -- ufix1
  SIGNAL vEndOut                          : std_logic;
  SIGNAL validOut                         : std_logic;

BEGIN
  u_pixelRAM : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(pixelInReg1comp),
              wr_addr => std_logic_vector(RAMwraddr),
              wr_en => RAMwren,  -- ufix1
              rd_addr => std_logic_vector(RAMrdaddr),
              rd_dout => RAMrddata1comp
              );

  u_pixelRAM_1 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(pixelInReg2comp),
              wr_addr => std_logic_vector(RAMwraddr),
              wr_en => RAMwren,  -- ufix1
              rd_addr => std_logic_vector(RAMrdaddr),
              rd_dout => RAMrddata2comp
              );

  u_pixelRAM_2 : SimpleDualPortRAM_generic_block
    GENERIC MAP( AddrWidth => 15,
                 DataWidth => 8
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(pixelInReg3comp),
              wr_addr => std_logic_vector(RAMwraddr),
              wr_en => RAMwren,  -- ufix1
              rd_addr => std_logic_vector(RAMrdaddr),
              rd_dout => RAMrddata3comp
              );

  rvalIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refValidInReg <= '0';
      ELSIF enb = '1' THEN
        refValidInReg <= in3_valid;
      END IF;
    END IF;
  END PROCESS rvalIReg_process;


  refvaldlyline_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refvaldlyline_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        refvaldlyline_reg(0) <= refValidInReg;
        refvaldlyline_reg(1 TO 5) <= refvaldlyline_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS refvaldlyline_process;

  pixelValidPreReg <= refvaldlyline_reg(5);

  rvalOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rvalOReg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rvalOReg_reg(0) <= pixelValidPreReg;
        rvalOReg_reg(1) <= rvalOReg_reg(0);
      END IF;
    END IF;
  END PROCESS rvalOReg_process;

  pixelValidOutReg <= rvalOReg_reg(1);

  rvEIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refVEndInReg <= '0';
      ELSIF enb = '1' THEN
        refVEndInReg <= in3_vEnd;
      END IF;
    END IF;
  END PROCESS rvEIReg_process;


  refvedlyline_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refvedlyline_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        refvedlyline_reg(0) <= refVEndInReg;
        refvedlyline_reg(1 TO 5) <= refvedlyline_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS refvedlyline_process;

  pixelVEndPreReg <= refvedlyline_reg(5);

  refvEndInv <=  NOT pixelVEndPreReg;

  rvSIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refVStartInReg <= '0';
      ELSIF enb = '1' THEN
        refVStartInReg <= in3_vStart;
      END IF;
    END IF;
  END PROCESS rvSIReg_process;


  refvsdlyline_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refvsdlyline_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        refvsdlyline_reg(0) <= refVStartInReg;
        refvsdlyline_reg(1 TO 5) <= refvsdlyline_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS refvsdlyline_process;

  pixelVStartPreReg <= refvsdlyline_reg(5);

  refinFrame2Term <= pixelValidPreReg AND pixelVStartPreReg;

  refValidInv <=  NOT pixelValidPreReg;

  refinFrame3Term <= refValidInv AND refinFrame;

  inFReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refinFrame <= '0';
      ELSIF enb = '1' THEN
        refinFrame <= refinFrameNext;
      END IF;
    END IF;
  END PROCESS inFReg_process;


  refinFrame1Term <= refvEndInv AND refinFrame;

  refinFrameNext <= refinFrame3Term OR (refinFrame1Term OR refinFrame2Term);

  refinFrameInv <=  NOT refinFrame;

  refnewFrame <= refinFrameNext AND refinFrameInv;

  vEIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelVEndInReg <= '0';
      ELSIF enb = '1' THEN
        pixelVEndInReg <= in1_vEnd;
      END IF;
    END IF;
  END PROCESS vEIReg_process;


  pixelvEndInv <=  NOT pixelVEndInReg;

  valIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelValidInReg <= '0';
      ELSIF enb = '1' THEN
        pixelValidInReg <= in1_valid;
      END IF;
    END IF;
  END PROCESS valIReg_process;


  vSIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelVStartInReg <= '0';
      ELSIF enb = '1' THEN
        pixelVStartInReg <= in1_vStart;
      END IF;
    END IF;
  END PROCESS vSIReg_process;


  pixelinFrame2Term <= pixelValidInReg AND pixelVStartInReg;

  pixelValidInv <=  NOT pixelValidInReg;

  pixelinFrame3Term <= pixelValidInv AND pixelinFrame;

  inFReg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelinFrame <= '0';
      ELSIF enb = '1' THEN
        pixelinFrame <= pixelinFrameNext;
      END IF;
    END IF;
  END PROCESS inFReg_1_process;


  pixelinFrame1Term <= pixelvEndInv AND pixelinFrame;

  pixelinFrameNext <= pixelinFrame3Term OR (pixelinFrame1Term OR pixelinFrame2Term);

  pixelinFrameInv <=  NOT pixelinFrame;

  pixelnewFrame <= pixelinFrameNext AND pixelinFrameInv;

  trueconst <= '1';

  fsvreg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        frameStartValid <= '0';
      ELSIF enb = '1' AND pixelnewFrame = '1' THEN
        frameStartValid <= trueconst;
      END IF;
    END IF;
  END PROCESS fsvreg_process;


  rfvreg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refFrameValid <= '0';
      ELSIF enb = '1' AND refnewFrame = '1' THEN
        refFrameValid <= frameStartValid;
      END IF;
    END IF;
  END PROCESS rfvreg_process;


  pixelOutValid <= pixelValidOutReg AND refFrameValid;

  pixzeroconst <= to_unsigned(16#00#, 8);

  pixel_0 <= unsigned(in0(0));

  pixelIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelInReg1comp <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        pixelInReg1comp <= pixel_0;
      END IF;
    END IF;
  END PROCESS pixelIReg_process;


  RAMwtone <= pixelinFrame OR pixelnewFrame;

  hEIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelHEndInReg <= '0';
      ELSIF enb = '1' THEN
        pixelHEndInReg <= in1_hEnd;
      END IF;
    END IF;
  END PROCESS hEIReg_process;


  pixelhEndInv <=  NOT pixelHEndInReg;

  hSIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelHStartInReg <= '0';
      ELSIF enb = '1' THEN
        pixelHStartInReg <= in1_hStart;
      END IF;
    END IF;
  END PROCESS hSIReg_process;


  pixelinLine2Term <= pixelVStartInReg AND (pixelValidInReg AND pixelHStartInReg);

  pixelinLineInv <=  NOT pixelinLine;

  pixelinLine6Term <= pixelinLineInv AND (pixelinFrame AND (pixelvEndInv AND (pixelValidInReg AND pixelHStartInReg)));

  pixelinLine5Term <= pixelValidInv AND pixelinLine;

  pixelinLine4Term <= pixelinFrameInv AND pixelinLine;

  pixelinLine3Term <= pixelVStartInReg AND pixelinLine;

  pixelinLine1Term <= pixelhEndInv AND pixelinLine;

  pixelinLineNext <= pixelinLine6Term OR (pixelinLine5Term OR (pixelinLine4Term OR (pixelinLine3Term OR (pixelinLine1Term OR pixelinLine2Term))));

  inLReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelinLine <= '0';
      ELSIF enb = '1' THEN
        pixelinLine <= pixelinLineNext;
      END IF;
    END IF;
  END PROCESS inLReg_process;


  pixelnewLine <= pixelinLineNext AND pixelinLineInv;

  RAMwttwo <= pixelinLine OR pixelnewLine;

  RAMwren <= pixelValidInReg AND (RAMwtone AND RAMwttwo);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32767
  wraddrcounter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        RAMwraddr <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND RAMwren = '1' THEN
        RAMwraddr <= RAMwraddr + to_unsigned(16#0001#, 15);
      END IF;
    END IF;
  END PROCESS wraddrcounter_process;


  ramrdframe <= refnewFrame AND (pixelValidPreReg AND (frameStartValid AND refFrameValid));

  rhEIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refHEndInReg <= '0';
      ELSIF enb = '1' THEN
        refHEndInReg <= in3_hEnd;
      END IF;
    END IF;
  END PROCESS rhEIReg_process;


  refhedlyline_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refhedlyline_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        refhedlyline_reg(0) <= refHEndInReg;
        refhedlyline_reg(1 TO 5) <= refhedlyline_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS refhedlyline_process;

  pixelHEndPreReg <= refhedlyline_reg(5);

  refhEndInv <=  NOT pixelHEndPreReg;

  rhSIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refHStartInReg <= '0';
      ELSIF enb = '1' THEN
        refHStartInReg <= in3_hStart;
      END IF;
    END IF;
  END PROCESS rhSIReg_process;


  refhsdlyline_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refhsdlyline_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        refhsdlyline_reg(0) <= refHStartInReg;
        refhsdlyline_reg(1 TO 5) <= refhsdlyline_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS refhsdlyline_process;

  pixelHStartPreReg <= refhsdlyline_reg(5);

  refinLine2Term <= pixelVStartPreReg AND (pixelValidPreReg AND pixelHStartPreReg);

  refinLineInv <=  NOT refinLine;

  refinLine6Term <= refinLineInv AND (refinFrame AND (refvEndInv AND (pixelValidPreReg AND pixelHStartPreReg)));

  refinLine5Term <= refValidInv AND refinLine;

  refinLine4Term <= refinFrameInv AND refinLine;

  refinLine3Term <= pixelVStartPreReg AND refinLine;

  inLReg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refinLine <= '0';
      ELSIF enb = '1' THEN
        refinLine <= refinLineNext;
      END IF;
    END IF;
  END PROCESS inLReg_1_process;


  refinLine1Term <= refhEndInv AND refinLine;

  refinLineNext <= refinLine6Term OR (refinLine5Term OR (refinLine4Term OR (refinLine3Term OR (refinLine1Term OR refinLine2Term))));

  refnewLine <= refinLineNext AND refinLineInv;

  refNewFrameInv <=  NOT refnewFrame;

  refNewLineNotFrame <= refnewLine AND refNewFrameInv;

  linerden <= refNewLineNotFrame AND (frameStartValid AND refFrameValid);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 9
  rdlinecounter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linerdaddr <= to_unsigned(16#0#, 4);
      ELSIF enb = '1' THEN
        IF linerden = '1' THEN 
          IF linerdaddr >= to_unsigned(16#9#, 4) THEN 
            linerdaddr <= to_unsigned(16#0#, 4);
          ELSE 
            linerdaddr <= linerdaddr + to_unsigned(16#1#, 4);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS rdlinecounter_process;


  
  linerd0addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#0#, 4) ELSE
      '0';

  pixelNewFrameInv <=  NOT pixelnewFrame;

  pixelNewLineNotFrame <= pixelnewLine AND pixelNewFrameInv;

  linewrreg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr1addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr1addr <= linewr0addr;
      END IF;
    END IF;
  END PROCESS linewrreg_process;


  linewrreg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr2addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr2addr <= linewr1addr;
      END IF;
    END IF;
  END PROCESS linewrreg_1_process;


  linewrreg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr3addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr3addr <= linewr2addr;
      END IF;
    END IF;
  END PROCESS linewrreg_2_process;


  linewrreg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr4addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr4addr <= linewr3addr;
      END IF;
    END IF;
  END PROCESS linewrreg_3_process;


  linewrreg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr5addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr5addr <= linewr4addr;
      END IF;
    END IF;
  END PROCESS linewrreg_4_process;


  linewrreg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr6addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr6addr <= linewr5addr;
      END IF;
    END IF;
  END PROCESS linewrreg_5_process;


  linewrreg_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr7addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr7addr <= linewr6addr;
      END IF;
    END IF;
  END PROCESS linewrreg_6_process;


  linewrreg_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr8addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr8addr <= linewr7addr;
      END IF;
    END IF;
  END PROCESS linewrreg_7_process;


  linewrreg_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr9addr <= '0';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr9addr <= linewr8addr;
      END IF;
    END IF;
  END PROCESS linewrreg_8_process;


  linewrreg_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        linewr0addr <= '1';
      ELSIF enb = '1' AND pixelNewLineNotFrame = '1' THEN
        linewr0addr <= linewr9addr;
      END IF;
    END IF;
  END PROCESS linewrreg_9_process;


  wr0gate <= linewr0addr AND (frameStartValid AND pixelNewLineNotFrame);

  line0StartsValidNext <= wr0gate AND trueconst;

  
  linerd1addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#1#, 4) ELSE
      '0';

  wr1gate <= linewr1addr AND (frameStartValid AND pixelNewLineNotFrame);

  line1StartsValidNext <= wr1gate AND trueconst;

  
  linerd2addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#2#, 4) ELSE
      '0';

  wr2gate <= linewr2addr AND (frameStartValid AND pixelNewLineNotFrame);

  line2StartsValidNext <= wr2gate AND trueconst;

  
  linerd3addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#3#, 4) ELSE
      '0';

  wr3gate <= linewr3addr AND (frameStartValid AND pixelNewLineNotFrame);

  line3StartsValidNext <= wr3gate AND trueconst;

  
  linerd4addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#4#, 4) ELSE
      '0';

  wr4gate <= linewr4addr AND (frameStartValid AND pixelNewLineNotFrame);

  line4StartsValidNext <= wr4gate AND trueconst;

  
  linerd5addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#5#, 4) ELSE
      '0';

  wr5gate <= linewr5addr AND (frameStartValid AND pixelNewLineNotFrame);

  line5StartsValidNext <= wr5gate AND trueconst;

  
  linerd6addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#6#, 4) ELSE
      '0';

  wr6gate <= linewr6addr AND (frameStartValid AND pixelNewLineNotFrame);

  line6StartsValidNext <= wr6gate AND trueconst;

  
  linerd7addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#7#, 4) ELSE
      '0';

  wr7gate <= linewr7addr AND (frameStartValid AND pixelNewLineNotFrame);

  line7StartsValidNext <= wr7gate AND trueconst;

  
  linerd8addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#8#, 4) ELSE
      '0';

  wr8gate <= linewr8addr AND (frameStartValid AND pixelNewLineNotFrame);

  line8StartsValidNext <= wr8gate AND trueconst;

  
  linerd9addrdecode <= '1' WHEN linerdaddr = to_unsigned(16#9#, 4) ELSE
      '0';

  wr9gate <= linewr9addr AND (frameStartValid AND pixelNewLineNotFrame);

  line9StartsValidNext <= wr9gate AND trueconst;

  rd9gate <= RAMrdload AND linerd9addrdecode;

  line9StartsEn <= rd9gate OR wr9gate;

  lsvalreg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line9StartsValid <= '0';
      ELSIF enb = '1' AND line9StartsEn = '1' THEN
        line9StartsValid <= line9StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_process;


  rd8gate <= RAMrdload AND linerd8addrdecode;

  line8StartsEn <= rd8gate OR wr8gate;

  lsvalreg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line8StartsValid <= '0';
      ELSIF enb = '1' AND line8StartsEn = '1' THEN
        line8StartsValid <= line8StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_1_process;


  rd7gate <= RAMrdload AND linerd7addrdecode;

  line7StartsEn <= rd7gate OR wr7gate;

  lsvalreg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line7StartsValid <= '0';
      ELSIF enb = '1' AND line7StartsEn = '1' THEN
        line7StartsValid <= line7StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_2_process;


  rd6gate <= RAMrdload AND linerd6addrdecode;

  line6StartsEn <= rd6gate OR wr6gate;

  lsvalreg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line6StartsValid <= '0';
      ELSIF enb = '1' AND line6StartsEn = '1' THEN
        line6StartsValid <= line6StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_3_process;


  rd5gate <= RAMrdload AND linerd5addrdecode;

  line5StartsEn <= rd5gate OR wr5gate;

  lsvalreg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line5StartsValid <= '0';
      ELSIF enb = '1' AND line5StartsEn = '1' THEN
        line5StartsValid <= line5StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_4_process;


  rd4gate <= RAMrdload AND linerd4addrdecode;

  line4StartsEn <= rd4gate OR wr4gate;

  lsvalreg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line4StartsValid <= '0';
      ELSIF enb = '1' AND line4StartsEn = '1' THEN
        line4StartsValid <= line4StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_5_process;


  rd3gate <= RAMrdload AND linerd3addrdecode;

  line3StartsEn <= rd3gate OR wr3gate;

  lsvalreg_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line3StartsValid <= '0';
      ELSIF enb = '1' AND line3StartsEn = '1' THEN
        line3StartsValid <= line3StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_6_process;


  rd2gate <= RAMrdload AND linerd2addrdecode;

  line2StartsEn <= rd2gate OR wr2gate;

  lsvalreg_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line2StartsValid <= '0';
      ELSIF enb = '1' AND line2StartsEn = '1' THEN
        line2StartsValid <= line2StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_7_process;


  rd1gate <= RAMrdload AND linerd1addrdecode;

  line1StartsEn <= rd1gate OR wr1gate;

  lsvalreg_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line1StartsValid <= '0';
      ELSIF enb = '1' AND line1StartsEn = '1' THEN
        line1StartsValid <= line1StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_8_process;


  rd0gate <= RAMrdload AND linerd0addrdecode;

  line0StartsEn <= rd0gate OR wr0gate;

  lsvalreg_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line0StartsValid <= '0';
      ELSIF enb = '1' AND line0StartsEn = '1' THEN
        line0StartsValid <= line0StartsValidNext;
      END IF;
    END IF;
  END PROCESS lsvalreg_9_process;


  
  linerdvalid <= line0StartsValid WHEN linerdaddr = to_unsigned(16#0#, 4) ELSE
      line1StartsValid WHEN linerdaddr = to_unsigned(16#1#, 4) ELSE
      line2StartsValid WHEN linerdaddr = to_unsigned(16#2#, 4) ELSE
      line3StartsValid WHEN linerdaddr = to_unsigned(16#3#, 4) ELSE
      line4StartsValid WHEN linerdaddr = to_unsigned(16#4#, 4) ELSE
      line5StartsValid WHEN linerdaddr = to_unsigned(16#5#, 4) ELSE
      line6StartsValid WHEN linerdaddr = to_unsigned(16#6#, 4) ELSE
      line7StartsValid WHEN linerdaddr = to_unsigned(16#7#, 4) ELSE
      line8StartsValid WHEN linerdaddr = to_unsigned(16#8#, 4) ELSE
      line9StartsValid;

  ramrdline <= refnewLine AND (linerdvalid AND (pixelValidPreReg AND (frameStartValid AND refFrameValid)));

  RAMrdload <= ramrdframe OR ramrdline;

  lsreg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line0Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line0StartsEn = '1' THEN
        line0Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_process;


  lsreg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line1Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line1StartsEn = '1' THEN
        line1Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_1_process;


  lsreg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line2Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line2StartsEn = '1' THEN
        line2Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_2_process;


  lsreg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line3Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line3StartsEn = '1' THEN
        line3Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_3_process;


  lsreg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line4Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line4StartsEn = '1' THEN
        line4Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_4_process;


  lsreg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line5Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line5StartsEn = '1' THEN
        line5Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_5_process;


  lsreg_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line6Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line6StartsEn = '1' THEN
        line6Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_6_process;


  lsreg_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line7Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line7StartsEn = '1' THEN
        line7Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_7_process;


  lsreg_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line8Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line8StartsEn = '1' THEN
        line8Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_8_process;


  lsreg_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        line9Starts <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND line9StartsEn = '1' THEN
        line9Starts <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS lsreg_9_process;


  
  linerddata <= line0Starts WHEN linerdaddr = to_unsigned(16#0#, 4) ELSE
      line1Starts WHEN linerdaddr = to_unsigned(16#1#, 4) ELSE
      line2Starts WHEN linerdaddr = to_unsigned(16#2#, 4) ELSE
      line3Starts WHEN linerdaddr = to_unsigned(16#3#, 4) ELSE
      line4Starts WHEN linerdaddr = to_unsigned(16#4#, 4) ELSE
      line5Starts WHEN linerdaddr = to_unsigned(16#5#, 4) ELSE
      line6Starts WHEN linerdaddr = to_unsigned(16#6#, 4) ELSE
      line7Starts WHEN linerdaddr = to_unsigned(16#7#, 4) ELSE
      line8Starts WHEN linerdaddr = to_unsigned(16#8#, 4) ELSE
      line9Starts;

  fsreg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        frameStart <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' AND pixelnewFrame = '1' THEN
        frameStart <= RAMwraddr;
      END IF;
    END IF;
  END PROCESS fsreg_process;


  
  RAMrdloadval <= linerddata WHEN refnewFrame = '0' ELSE
      frameStart;

  refEarlyInFrame <= refinFrame OR refnewFrame;

  refEarlyInLine <= refinLine OR refnewLine;

  constone <= to_unsigned(16#0001#, 15);

  RAMrdnextaddr <= RAMrdaddr + constone;

  
  relop_relop1 <= '1' WHEN RAMrdnextaddr = linerddata ELSE
      '0';

  notholdaddr <=  NOT (relop_relop1 AND linerdvalid);

  RAMrden <= notholdaddr AND (refEarlyInLine AND (refEarlyInFrame AND (pixelValidPreReg AND (frameStartValid AND refFrameValid))));

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32767
  rdaddrcounter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        RAMrdaddr <= to_unsigned(16#0000#, 15);
      ELSIF enb = '1' THEN
        IF RAMrdload = '1' THEN 
          RAMrdaddr <= RAMrdloadval;
        ELSIF RAMrden = '1' THEN 
          RAMrdaddr <= RAMrdaddr + to_unsigned(16#0001#, 15);
        END IF;
      END IF;
    END IF;
  END PROCESS rdaddrcounter_process;


  RAMrddata1comp_unsigned <= unsigned(RAMrddata1comp);

  
  pixelOutReg1comp <= pixzeroconst WHEN pixelOutValid = '0' ELSE
      RAMrddata1comp_unsigned;

  pixelOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelRegOutMux1comp <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        pixelRegOutMux1comp <= pixelOutReg1comp;
      END IF;
    END IF;
  END PROCESS pixelOReg_process;


  pixel_1 <= unsigned(in0(1));

  pixelIReg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelInReg2comp <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        pixelInReg2comp <= pixel_1;
      END IF;
    END IF;
  END PROCESS pixelIReg_1_process;


  RAMrddata2comp_unsigned <= unsigned(RAMrddata2comp);

  
  pixelOutReg2comp <= pixzeroconst WHEN pixelOutValid = '0' ELSE
      RAMrddata2comp_unsigned;

  pixelOReg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelRegOutMux2comp <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        pixelRegOutMux2comp <= pixelOutReg2comp;
      END IF;
    END IF;
  END PROCESS pixelOReg_1_process;


  pixel_2 <= unsigned(in0(2));

  pixelIReg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelInReg3comp <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        pixelInReg3comp <= pixel_2;
      END IF;
    END IF;
  END PROCESS pixelIReg_2_process;


  RAMrddata3comp_unsigned <= unsigned(RAMrddata3comp);

  
  pixelOutReg3comp <= pixzeroconst WHEN pixelOutValid = '0' ELSE
      RAMrddata3comp_unsigned;

  pixelOReg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        pixelRegOutMux3comp <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        pixelRegOutMux3comp <= pixelOutReg3comp;
      END IF;
    END IF;
  END PROCESS pixelOReg_2_process;


  pixelOut(0) <= pixelRegOutMux1comp;
  pixelOut(1) <= pixelRegOutMux2comp;
  pixelOut(2) <= pixelRegOutMux3comp;

  outputgen: FOR k IN 0 TO 2 GENERATE
    out0(k) <= std_logic_vector(pixelOut(k));
  END GENERATE;

  refzeroconst_2 <= to_unsigned(16#00#, 8);

  in2_unsigned <= unsigned(in2);

  refpixelIReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refpixelInReg <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        refpixelInReg <= in2_unsigned;
      END IF;
    END IF;
  END PROCESS refpixelIReg_process;


  refpixdlyline_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refpixdlyline_reg <= (OTHERS => to_unsigned(16#00#, 8));
      ELSIF enb = '1' THEN
        refpixdlyline_reg(0) <= refpixelInReg;
        refpixdlyline_reg(1 TO 7) <= refpixdlyline_reg(0 TO 6);
      END IF;
    END IF;
  END PROCESS refpixdlyline_process;

  refpixeldly <= refpixdlyline_reg(7);

  
  refpixelOutReg <= refzeroconst_2 WHEN pixelValidOutReg = '0' ELSE
      refpixeldly;

  refpixelOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        refPixelOut <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        refPixelOut <= refpixelOutReg;
      END IF;
    END IF;
  END PROCESS refpixelOReg_process;


  out1 <= std_logic_vector(refPixelOut);

  rhSOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rhSOReg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rhSOReg_reg(0) <= pixelHStartPreReg;
        rhSOReg_reg(1) <= rhSOReg_reg(0);
      END IF;
    END IF;
  END PROCESS rhSOReg_process;

  pixelHStartOutReg <= rhSOReg_reg(1);

  refhSOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hStartOut <= '0';
      ELSIF enb = '1' THEN
        hStartOut <= pixelHStartOutReg;
      END IF;
    END IF;
  END PROCESS refhSOReg_process;


  out2_hStart <= hStartOut;

  rhEOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rhEOReg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rhEOReg_reg(0) <= pixelHEndPreReg;
        rhEOReg_reg(1) <= rhEOReg_reg(0);
      END IF;
    END IF;
  END PROCESS rhEOReg_process;

  pixelHEndOutReg <= rhEOReg_reg(1);

  refhEOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hEndOut <= '0';
      ELSIF enb = '1' THEN
        hEndOut <= pixelHEndOutReg;
      END IF;
    END IF;
  END PROCESS refhEOReg_process;


  out2_hEnd <= hEndOut;

  rvSOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rvSOReg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rvSOReg_reg(0) <= pixelVStartPreReg;
        rvSOReg_reg(1) <= rvSOReg_reg(0);
      END IF;
    END IF;
  END PROCESS rvSOReg_process;

  pixelVStartOutReg <= rvSOReg_reg(1);

  refvSOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        vStartOut <= '0';
      ELSIF enb = '1' THEN
        vStartOut <= pixelVStartOutReg;
      END IF;
    END IF;
  END PROCESS refvSOReg_process;


  out2_vStart <= vStartOut;

  rvEOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        rvEOReg_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rvEOReg_reg(0) <= pixelVEndPreReg;
        rvEOReg_reg(1) <= rvEOReg_reg(0);
      END IF;
    END IF;
  END PROCESS rvEOReg_process;

  pixelVEndOutReg <= rvEOReg_reg(1);

  refvEOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        vEndOut <= '0';
      ELSIF enb = '1' THEN
        vEndOut <= pixelVEndOutReg;
      END IF;
    END IF;
  END PROCESS refvEOReg_process;


  out2_vEnd <= vEndOut;

  refvalOReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOut <= '0';
      ELSIF enb = '1' THEN
        validOut <= pixelValidOutReg;
      END IF;
    END IF;
  END PROCESS refvalOReg_process;


  out2_valid <= validOut;

END rtl;

