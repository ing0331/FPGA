-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CornerDetectionHDL\HDL_Corner_Algorithm.vhd
-- Created: 2023-06-21 14:30:33
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 7.67766e-06
-- Target subsystem base rate: 7.67766e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        7.67766e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pixelOut                      ce_out        7.67766e-06
-- ctrlOut_hStart                ce_out        7.67766e-06
-- ctrlOut_hEnd                  ce_out        7.67766e-06
-- ctrlOut_vStart                ce_out        7.67766e-06
-- ctrlOut_vEnd                  ce_out        7.67766e-06
-- ctrlOut_valid                 ce_out        7.67766e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HDL_Corner_Algorithm
-- Source Path: CornerDetectionHDL/HDL Corner Algorithm
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_Corner_Algorithm_pkg.ALL;

ENTITY HDL_Corner_Algorithm IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        pixelIn                           :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        ctrlIn_hStart                     :   IN    std_logic;
        ctrlIn_hEnd                       :   IN    std_logic;
        ctrlIn_vStart                     :   IN    std_logic;
        ctrlIn_vEnd                       :   IN    std_logic;
        ctrlIn_valid                      :   IN    std_logic;
        SliceLevel                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        OverlayRGB                        :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        OverlayTransp                     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        pixelOut                          :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        ctrlOut_hStart                    :   OUT   std_logic;
        ctrlOut_hEnd                      :   OUT   std_logic;
        ctrlOut_vStart                    :   OUT   std_logic;
        ctrlOut_vEnd                      :   OUT   std_logic;
        ctrlOut_valid                     :   OUT   std_logic
        );
END HDL_Corner_Algorithm;


ARCHITECTURE rtl OF HDL_Corner_Algorithm IS

  -- Component Declarations
  COMPONENT RGB2Bin
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn                         :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          ctrlIn_hStart                   :   IN    std_logic;
          ctrlIn_hEnd                     :   IN    std_logic;
          ctrlIn_vStart                   :   IN    std_logic;
          ctrlIn_vEnd                     :   IN    std_logic;
          ctrlIn_valid                    :   IN    std_logic;
          SliceLevel                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          pixelOut                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrlOut_hStart                  :   OUT   std_logic;
          ctrlOut_hEnd                    :   OUT   std_logic;
          ctrlOut_vStart                  :   OUT   std_logic;
          ctrlOut_vEnd                    :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Corner_Detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          in1_hStart                      :   IN    std_logic;
          in1_hEnd                        :   IN    std_logic;
          in1_vStart                      :   IN    std_logic;
          in1_vEnd                        :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(43 DOWNTO 0);  -- sfix44
          out1_hStart                     :   OUT   std_logic;
          out1_hEnd                       :   OUT   std_logic;
          out1_vStart                     :   OUT   std_logic;
          out1_vEnd                       :   OUT   std_logic;
          out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Convert_Levels
    PORT( HarrisIn                        :   IN    std_logic_vector(43 DOWNTO 0);  -- sfix44
          PixelOut                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Pixel_Stream_Aligner
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          in1_hStart                      :   IN    std_logic;
          in1_hEnd                        :   IN    std_logic;
          in1_vStart                      :   IN    std_logic;
          in1_vEnd                        :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          in2                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          in3_hStart                      :   IN    std_logic;
          in3_hEnd                        :   IN    std_logic;
          in3_vStart                      :   IN    std_logic;
          in3_vEnd                        :   IN    std_logic;
          in3_valid                       :   IN    std_logic;
          out0                            :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          out1                            :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          out2_hStart                     :   OUT   std_logic;
          out2_hEnd                       :   OUT   std_logic;
          out2_vStart                     :   OUT   std_logic;
          out2_vEnd                       :   OUT   std_logic;
          out2_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Overlay
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          RGBIn                           :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          BinaryIn                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          OverlayRGB                      :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          OverlayTransp                   :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          CtrlIn_hStart                   :   IN    std_logic;
          CtrlIn_hEnd                     :   IN    std_logic;
          CtrlIn_vStart                   :   IN    std_logic;
          CtrlIn_vEnd                     :   IN    std_logic;
          CtrlIn_valid                    :   IN    std_logic;
          RGBout                          :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          CtrlOut_hStart                  :   OUT   std_logic;
          CtrlOut_hEnd                    :   OUT   std_logic;
          CtrlOut_vStart                  :   OUT   std_logic;
          CtrlOut_vEnd                    :   OUT   std_logic;
          CtrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RGB2Bin
    USE ENTITY work.RGB2Bin(rtl);

  FOR ALL : Corner_Detector
    USE ENTITY work.Corner_Detector(rtl);

  FOR ALL : Convert_Levels
    USE ENTITY work.Convert_Levels(rtl);

  FOR ALL : Pixel_Stream_Aligner
    USE ENTITY work.Pixel_Stream_Aligner(rtl);

  FOR ALL : Overlay
    USE ENTITY work.Overlay(rtl);

  -- Signals
  SIGNAL RGB2Bin_out1                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL RGB2Bin_out2_hStart              : std_logic;
  SIGNAL RGB2Bin_out2_hEnd                : std_logic;
  SIGNAL RGB2Bin_out2_vStart              : std_logic;
  SIGNAL RGB2Bin_out2_vEnd                : std_logic;
  SIGNAL RGB2Bin_out2_valid               : std_logic;
  SIGNAL Corner_Detector_out1             : std_logic_vector(43 DOWNTO 0);  -- ufix44
  SIGNAL Corner_Detector_out2_hStart      : std_logic;
  SIGNAL Corner_Detector_out2_hEnd        : std_logic;
  SIGNAL Corner_Detector_out2_vStart      : std_logic;
  SIGNAL Corner_Detector_out2_vEnd        : std_logic;
  SIGNAL Corner_Detector_out2_valid       : std_logic;
  SIGNAL Convert_Levels_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Pixel_Stream_Aligner_out1        : vector_of_std_logic_vector8(0 TO 2);  -- ufix8 [3]
  SIGNAL Pixel_Stream_Aligner_out2        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Pixel_Stream_Aligner_out3_hStart : std_logic;
  SIGNAL Pixel_Stream_Aligner_out3_hEnd   : std_logic;
  SIGNAL Pixel_Stream_Aligner_out3_vStart : std_logic;
  SIGNAL Pixel_Stream_Aligner_out3_vEnd   : std_logic;
  SIGNAL Pixel_Stream_Aligner_out3_valid  : std_logic;
  SIGNAL Overlay_out1                     : vector_of_std_logic_vector8(0 TO 2);  -- ufix8 [3]
  SIGNAL Overlay_out2_hStart              : std_logic;
  SIGNAL Overlay_out2_hEnd                : std_logic;
  SIGNAL Overlay_out2_vStart              : std_logic;
  SIGNAL Overlay_out2_vEnd                : std_logic;
  SIGNAL Overlay_out2_valid               : std_logic;

BEGIN
  u_RGB2Bin : RGB2Bin
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              pixelIn => pixelIn,  -- uint8 [3]
              ctrlIn_hStart => ctrlIn_hStart,
              ctrlIn_hEnd => ctrlIn_hEnd,
              ctrlIn_vStart => ctrlIn_vStart,
              ctrlIn_vEnd => ctrlIn_vEnd,
              ctrlIn_valid => ctrlIn_valid,
              SliceLevel => SliceLevel,  -- uint8
              pixelOut => RGB2Bin_out1,  -- uint8
              ctrlOut_hStart => RGB2Bin_out2_hStart,
              ctrlOut_hEnd => RGB2Bin_out2_hEnd,
              ctrlOut_vStart => RGB2Bin_out2_vStart,
              ctrlOut_vEnd => RGB2Bin_out2_vEnd,
              ctrlOut_valid => RGB2Bin_out2_valid
              );

  u_Corner_Detector : Corner_Detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              in0 => RGB2Bin_out1,  -- uint8
              in1_hStart => RGB2Bin_out2_hStart,
              in1_hEnd => RGB2Bin_out2_hEnd,
              in1_vStart => RGB2Bin_out2_vStart,
              in1_vEnd => RGB2Bin_out2_vEnd,
              in1_valid => RGB2Bin_out2_valid,
              out0 => Corner_Detector_out1,  -- sfix44
              out1_hStart => Corner_Detector_out2_hStart,
              out1_hEnd => Corner_Detector_out2_hEnd,
              out1_vStart => Corner_Detector_out2_vStart,
              out1_vEnd => Corner_Detector_out2_vEnd,
              out1_valid => Corner_Detector_out2_valid
              );

  u_Convert_Levels : Convert_Levels
    PORT MAP( HarrisIn => Corner_Detector_out1,  -- sfix44
              PixelOut => Convert_Levels_out1  -- uint8
              );

  u_Pixel_Stream_Aligner : Pixel_Stream_Aligner
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              in0 => pixelIn,  -- uint8 [3]
              in1_hStart => ctrlIn_hStart,
              in1_hEnd => ctrlIn_hEnd,
              in1_vStart => ctrlIn_vStart,
              in1_vEnd => ctrlIn_vEnd,
              in1_valid => ctrlIn_valid,
              in2 => Convert_Levels_out1,  -- uint8
              in3_hStart => Corner_Detector_out2_hStart,
              in3_hEnd => Corner_Detector_out2_hEnd,
              in3_vStart => Corner_Detector_out2_vStart,
              in3_vEnd => Corner_Detector_out2_vEnd,
              in3_valid => Corner_Detector_out2_valid,
              out0 => Pixel_Stream_Aligner_out1,  -- uint8 [3]
              out1 => Pixel_Stream_Aligner_out2,  -- uint8
              out2_hStart => Pixel_Stream_Aligner_out3_hStart,
              out2_hEnd => Pixel_Stream_Aligner_out3_hEnd,
              out2_vStart => Pixel_Stream_Aligner_out3_vStart,
              out2_vEnd => Pixel_Stream_Aligner_out3_vEnd,
              out2_valid => Pixel_Stream_Aligner_out3_valid
              );

  u_Overlay : Overlay
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              RGBIn => Pixel_Stream_Aligner_out1,  -- uint8 [3]
              BinaryIn => Pixel_Stream_Aligner_out2,  -- uint8
              OverlayRGB => OverlayRGB,  -- uint8 [3]
              OverlayTransp => OverlayTransp,  -- uint8
              CtrlIn_hStart => Pixel_Stream_Aligner_out3_hStart,
              CtrlIn_hEnd => Pixel_Stream_Aligner_out3_hEnd,
              CtrlIn_vStart => Pixel_Stream_Aligner_out3_vStart,
              CtrlIn_vEnd => Pixel_Stream_Aligner_out3_vEnd,
              CtrlIn_valid => Pixel_Stream_Aligner_out3_valid,
              RGBout => Overlay_out1,  -- uint8 [3]
              CtrlOut_hStart => Overlay_out2_hStart,
              CtrlOut_hEnd => Overlay_out2_hEnd,
              CtrlOut_vStart => Overlay_out2_vStart,
              CtrlOut_vEnd => Overlay_out2_vEnd,
              CtrlOut_valid => Overlay_out2_valid
              );

  ce_out <= clk_enable;

  pixelOut <= Overlay_out1;

  ctrlOut_hStart <= Overlay_out2_hStart;

  ctrlOut_hEnd <= Overlay_out2_hEnd;

  ctrlOut_vStart <= Overlay_out2_vStart;

  ctrlOut_vEnd <= Overlay_out2_vEnd;

  ctrlOut_valid <= Overlay_out2_valid;

END rtl;

