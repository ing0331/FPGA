-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CornerDetectionHDL\HarrisFilterC.vhd
-- Created: 2023-06-21 14:30:33
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HarrisFilterC
-- Source Path: CornerDetectionHDL/HDL Corner Algorithm/Corner Detector/HarrisCore/HarrisFilterC
-- Hierarchy Level: 3
-- 
-- Image Filter C
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_Corner_Algorithm_pkg.ALL;

ENTITY HarrisFilterC IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        CIn                               :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20
        hStart                            :   IN    std_logic;
        hEnd                              :   IN    std_logic;
        vStart                            :   IN    std_logic;
        vEnd                              :   IN    std_logic;
        valid                             :   IN    std_logic;
        filterCout                        :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20
        );
END HarrisFilterC;


ARCHITECTURE rtl OF HarrisFilterC IS

  -- Component Declarations
  COMPONENT LineBuffer_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20
          hStartIn                        :   IN    std_logic;
          hEndIn                          :   IN    std_logic;
          vStartIn                        :   IN    std_logic;
          vEndIn                          :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   vector_of_std_logic_vector20(0 TO 4);  -- sfix20 [5]
          validOut                        :   OUT   std_logic;
          processDataOut                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FIR2DKernel_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    vector_of_std_logic_vector20(0 TO 4);  -- sfix20 [5]
          validIn                         :   IN    std_logic;
          processData                     :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : LineBuffer_block2
    USE ENTITY work.LineBuffer_block2(rtl);

  FOR ALL : FIR2DKernel_block1
    USE ENTITY work.FIR2DKernel_block1(rtl);

  -- Signals
  SIGNAL hStartIn                         : std_logic;
  SIGNAL hEndIn                           : std_logic;
  SIGNAL vStartIn                         : std_logic;
  SIGNAL vEndIn                           : std_logic;
  SIGNAL validIn                          : std_logic;
  SIGNAL CIn_signed                       : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL dataInReg                        : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL hStartInReg                      : std_logic;
  SIGNAL hendInReg                        : std_logic;
  SIGNAL vStartInReg                      : std_logic;
  SIGNAL vendInReg                        : std_logic;
  SIGNAL validInReg                       : std_logic;
  SIGNAL LMKDataOut                       : vector_of_std_logic_vector20(0 TO 4);  -- ufix20 [5]
  SIGNAL LMKvalidOut                      : std_logic;
  SIGNAL LMKprocessOut                    : std_logic;
  SIGNAL preFilterDataOut                 : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL preValidOut                      : std_logic;
  SIGNAL zeroOut_1                        : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preFilterDataOut_signed          : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preDataOut                       : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL intdelay_reg                     : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL dataOut                          : signed(19 DOWNTO 0);  -- sfix20

BEGIN
  u_LineBuffer : LineBuffer_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => std_logic_vector(dataInReg),  -- sfix20
              hStartIn => hStartInReg,
              hEndIn => hendInReg,
              vStartIn => vStartInReg,
              vEndIn => vendInReg,
              validIn => validInReg,
              dataOut => LMKDataOut,  -- sfix20 [5]
              validOut => LMKvalidOut,
              processDataOut => LMKprocessOut
              );

  u_imagekernel_inst : FIR2DKernel_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => LMKDataOut,  -- sfix20 [5]
              validIn => LMKvalidOut,
              processData => LMKprocessOut,
              dataOut => preFilterDataOut,  -- sfix20
              validOut => preValidOut
              );

  hStartIn <= hStart;

  hEndIn <= hEnd;

  vStartIn <= vStart;

  vEndIn <= vEnd;

  validIn <= valid;

  CIn_signed <= signed(CIn);

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dataInReg <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        dataInReg <= CIn_signed;
      END IF;
    END IF;
  END PROCESS reg_process;


  reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hStartInReg <= '0';
      ELSIF enb = '1' THEN
        hStartInReg <= hStartIn;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        hendInReg <= '0';
      ELSIF enb = '1' THEN
        hendInReg <= hEndIn;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  reg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        vStartInReg <= '0';
      ELSIF enb = '1' THEN
        vStartInReg <= vStartIn;
      END IF;
    END IF;
  END PROCESS reg_3_process;


  reg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        vendInReg <= '0';
      ELSIF enb = '1' THEN
        vendInReg <= vEndIn;
      END IF;
    END IF;
  END PROCESS reg_4_process;


  reg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validInReg <= '0';
      ELSIF enb = '1' THEN
        validInReg <= validIn;
      END IF;
    END IF;
  END PROCESS reg_5_process;


  zeroOut_1 <= to_signed(16#00000#, 20);

  preFilterDataOut_signed <= signed(preFilterDataOut);

  
  preDataOut <= zeroOut_1 WHEN preValidOut = '0' ELSE
      preFilterDataOut_signed;

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        intdelay_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' THEN
        intdelay_reg(0) <= preDataOut;
        intdelay_reg(1 TO 3) <= intdelay_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  dataOut <= intdelay_reg(3);

  filterCout <= std_logic_vector(dataOut);

END rtl;

