-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CornerDetectionHDL\FIR2DKernel_block1.vhd
-- Created: 2023-06-21 14:30:33
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FIR2DKernel_block1
-- Source Path: CornerDetectionHDL/HDL Corner Algorithm/Corner Detector/HarrisCore/HarrisFilterC/FIR2DKernel
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.HDL_Corner_Algorithm_pkg.ALL;

ENTITY FIR2DKernel_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    vector_of_std_logic_vector20(0 TO 4);  -- sfix20 [5]
        validIn                           :   IN    std_logic;
        processData                       :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20
        validOut                          :   OUT   std_logic
        );
END FIR2DKernel_block1;


ARCHITECTURE rtl OF FIR2DKernel_block1 IS

  -- Signals
  SIGNAL dataIn_0                         : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapDelay_1_reg                   : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL tapOutData_1                     : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL tapOutData_1_0                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd1_stage1_1                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL dataIn_4                         : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapDelay_5_reg                   : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL tapOutData_5                     : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL tapOutData_5_0                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd1_stage1_2                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd1_stage1_add_1             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd1_stage2_1                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL tapOutData_1_4                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd1_stage1_3                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_5_4                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd1_stage1_4                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd1_stage1_add_2             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd1_stage2_2                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd1_stage2_add_1             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd1_final_reg                : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd1_balance_reg              : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL multInDelay1_reg                 : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL multInReg1                       : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL gain_mul_temp                    : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL multOut1                         : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL multOutDelay1_reg                : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL multOutReg1                      : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL add_stage1_1                     : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL dataIn_1                         : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapDelay_2_reg                   : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL tapOutData_2                     : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL tapOutData_2_0                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_1                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL dataIn_3                         : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapDelay_4_reg                   : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL tapOutData_4                     : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL tapOutData_4_0                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_2                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_add_1             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd2_stage2_1                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL tapOutData_1_1                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_3                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_5_1                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_4                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_add_2             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd2_stage2_2                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd2_stage2_add_1             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd2_stage3_1                 : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL tapOutData_1_3                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_5                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_5_3                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_6                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_add_3             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd2_stage2_3                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL tapOutData_2_4                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_7                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_4_4                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_8                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd2_stage1_add_4             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd2_stage2_4                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd2_stage2_add_2             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd2_stage3_2                 : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd2_stage3_add_1             : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL preAdd2_final_reg                : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL multInDelay2_reg                 : vector_of_signed23(0 TO 1);  -- sfix23 [2]
  SIGNAL multInReg2                       : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL gain_mul_temp_1                  : signed(39 DOWNTO 0);  -- sfix40_En19
  SIGNAL multOut2                         : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL multOutDelay2_reg                : vector_of_signed39(0 TO 1);  -- sfix39 [2]
  SIGNAL multOutReg2                      : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL add_stage1_2                     : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL adder_add_cast                   : signed(39 DOWNTO 0);  -- sfix40_En19
  SIGNAL adder_add_cast_1                 : signed(39 DOWNTO 0);  -- sfix40_En19
  SIGNAL add_stage1_add_1                 : signed(39 DOWNTO 0);  -- sfix40_En19
  SIGNAL add_stage2_1                     : signed(39 DOWNTO 0);  -- sfix40_En19
  SIGNAL dataIn_2                         : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapDelay_3_reg                   : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL tapOutData_3                     : vector_of_signed20(0 TO 4);  -- sfix20 [5]
  SIGNAL tapOutData_3_0                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd3_stage1_1                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_1_2                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd3_stage1_2                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd3_stage1_add_1             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd3_stage2_1                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL tapOutData_5_2                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd3_stage1_3                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_3_4                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd3_stage1_4                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd3_stage1_add_2             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd3_stage2_2                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd3_stage2_add_1             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd3_final_reg                : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd3_balance_reg              : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL multInDelay3_reg                 : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL multInReg3                       : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL gain_mul_temp_2                  : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL multOut3                         : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL multOutDelay3_reg                : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL multOutReg3                      : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL add_stage1_3                     : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL tapOutData_2_1                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd4_stage1_1                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_4_1                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd4_stage1_2                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd4_stage1_add_1             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd4_stage2_1                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL tapOutData_2_3                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd4_stage1_3                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_4_3                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd4_stage1_4                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd4_stage1_add_2             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd4_stage2_2                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd4_stage2_add_1             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd4_final_reg                : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd4_balance_reg              : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL multInDelay4_reg                 : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL multInReg4                       : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL gain_mul_temp_3                  : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL multOut4                         : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL multOutDelay4_reg                : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL multOutReg4                      : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL add_stage1_4                     : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL adder_add_cast_2                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL adder_add_cast_3                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL add_stage1_add_2                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL add_stage2_2                     : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL adder_add_cast_4                 : signed(40 DOWNTO 0);  -- sfix41_En19
  SIGNAL adder_add_cast_5                 : signed(40 DOWNTO 0);  -- sfix41_En19
  SIGNAL add_stage2_add_1                 : signed(40 DOWNTO 0);  -- sfix41_En19
  SIGNAL add_stage3_1                     : signed(40 DOWNTO 0);  -- sfix41_En19
  SIGNAL tapOutData_3_1                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd5_stage1_1                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_2_2                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd5_stage1_2                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd5_stage1_add_1             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd5_stage2_1                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL tapOutData_4_2                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd5_stage1_3                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL tapOutData_3_3                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd5_stage1_4                 : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd5_stage1_add_2             : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd5_stage2_2                 : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL preAdd5_stage2_add_1             : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd5_final_reg                : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL preAdd5_balance_reg              : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL multInDelay5_reg                 : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL multInReg5                       : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL gain_mul_temp_4                  : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL multOut5                         : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL multOutDelay5_reg                : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL multOutReg5                      : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL add_stage1_5                     : signed(37 DOWNTO 0);  -- sfix38_En19
  SIGNAL tapOutData_3_2                   : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL preAdd6_balance_reg              : vector_of_signed20(0 TO 3);  -- sfix20 [4]
  SIGNAL preAdd6_balance_reg_1            : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL multInDelay6_reg                 : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL multInReg6                       : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL gain_mul_temp_5                  : signed(36 DOWNTO 0);  -- sfix37_En19
  SIGNAL multOut6                         : signed(35 DOWNTO 0);  -- sfix36_En19
  SIGNAL multOutDelay6_reg                : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL multOutReg6                      : signed(35 DOWNTO 0);  -- sfix36_En19
  SIGNAL add_stage1_6                     : signed(35 DOWNTO 0);  -- sfix36_En19
  SIGNAL adder_add_cast_6                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL adder_add_cast_7                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL add_stage1_add_3                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL add_stage2_3_reg                 : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL add_stage3_2                     : signed(38 DOWNTO 0);  -- sfix39_En19
  SIGNAL adder_add_cast_8                 : signed(41 DOWNTO 0);  -- sfix42_En19
  SIGNAL adder_add_cast_9                 : signed(41 DOWNTO 0);  -- sfix42_En19
  SIGNAL add_stage3_add_1                 : signed(41 DOWNTO 0);  -- sfix42_En19
  SIGNAL add_final_reg                    : signed(41 DOWNTO 0);  -- sfix42_En19
  SIGNAL add_final_reg_conv               : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL dataOut_tmp                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL validOut_tap_latency_reg         : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL validIn_reg                      : std_logic;
  SIGNAL validIn_reg_vldSig               : std_logic;
  SIGNAL validOut_fir_latency_reg         : std_logic_vector(0 TO 12);  -- ufix1 [13]

BEGIN
  dataIn_0 <= signed(dataIn(0));

  tapDelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        tapDelay_1_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND processData = '1' THEN
        tapDelay_1_reg(3) <= dataIn_0;
        tapDelay_1_reg(0 TO 2) <= tapDelay_1_reg(1 TO 3);
      END IF;
    END IF;
  END PROCESS tapDelay_1_process;

  tapOutData_1(0 TO 3) <= tapDelay_1_reg(0 TO 3);
  tapOutData_1(4) <= dataIn_0;

  tapOutData_1_0 <= tapOutData_1(0);

  preAdd1_stage1_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_stage1_1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd1_stage1_1 <= tapOutData_1_0;
      END IF;
    END IF;
  END PROCESS preAdd1_stage1_1_reg_process;


  dataIn_4 <= signed(dataIn(4));

  tapDelay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        tapDelay_5_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND processData = '1' THEN
        tapDelay_5_reg(3) <= dataIn_4;
        tapDelay_5_reg(0 TO 2) <= tapDelay_5_reg(1 TO 3);
      END IF;
    END IF;
  END PROCESS tapDelay_5_process;

  tapOutData_5(0 TO 3) <= tapDelay_5_reg(0 TO 3);
  tapOutData_5(4) <= dataIn_4;

  tapOutData_5_0 <= tapOutData_5(0);

  preAdd1_stage1_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_stage1_2 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd1_stage1_2 <= tapOutData_5_0;
      END IF;
    END IF;
  END PROCESS preAdd1_stage1_2_reg_process;


  preAdd1_stage1_add_1 <= resize(preAdd1_stage1_1, 21) + resize(preAdd1_stage1_2, 21);

  preAdd1_stage2_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_stage2_1 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd1_stage2_1 <= preAdd1_stage1_add_1;
      END IF;
    END IF;
  END PROCESS preAdd1_stage2_1_reg_process;


  tapOutData_1_4 <= tapOutData_1(4);

  preAdd1_stage1_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_stage1_3 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd1_stage1_3 <= tapOutData_1_4;
      END IF;
    END IF;
  END PROCESS preAdd1_stage1_3_reg_process;


  tapOutData_5_4 <= tapOutData_5(4);

  preAdd1_stage1_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_stage1_4 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd1_stage1_4 <= tapOutData_5_4;
      END IF;
    END IF;
  END PROCESS preAdd1_stage1_4_reg_process;


  preAdd1_stage1_add_2 <= resize(preAdd1_stage1_3, 21) + resize(preAdd1_stage1_4, 21);

  preAdd1_stage2_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_stage2_2 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd1_stage2_2 <= preAdd1_stage1_add_2;
      END IF;
    END IF;
  END PROCESS preAdd1_stage2_2_reg_process;


  preAdd1_stage2_add_1 <= resize(preAdd1_stage2_1, 22) + resize(preAdd1_stage2_2, 22);

  preAdd1_final_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_final_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd1_final_reg <= preAdd1_stage2_add_1;
      END IF;
    END IF;
  END PROCESS preAdd1_final_process;


  preAdd1_balance_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd1_balance_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd1_balance_reg <= preAdd1_final_reg;
      END IF;
    END IF;
  END PROCESS preAdd1_balance_process;


  multInDelay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multInDelay1_reg <= (OTHERS => to_signed(16#000000#, 22));
      ELSIF enb = '1' THEN
        multInDelay1_reg(0) <= preAdd1_balance_reg;
        multInDelay1_reg(1) <= multInDelay1_reg(0);
      END IF;
    END IF;
  END PROCESS multInDelay1_process;

  multInReg1 <= multInDelay1_reg(1);

  gain_mul_temp <= to_signed(16#0248A#, 17) * multInReg1;
  multOut1 <= gain_mul_temp(37 DOWNTO 0);

  multOutDelay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multOutDelay1_reg <= (OTHERS => to_signed(0, 38));
      ELSIF enb = '1' THEN
        multOutDelay1_reg(0) <= multOut1;
        multOutDelay1_reg(1) <= multOutDelay1_reg(0);
      END IF;
    END IF;
  END PROCESS multOutDelay1_process;

  multOutReg1 <= multOutDelay1_reg(1);

  add_stage1_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage1_1 <= to_signed(0, 38);
      ELSIF enb = '1' THEN
        add_stage1_1 <= multOutReg1;
      END IF;
    END IF;
  END PROCESS add_stage1_1_reg_process;


  dataIn_1 <= signed(dataIn(1));

  tapDelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        tapDelay_2_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND processData = '1' THEN
        tapDelay_2_reg(3) <= dataIn_1;
        tapDelay_2_reg(0 TO 2) <= tapDelay_2_reg(1 TO 3);
      END IF;
    END IF;
  END PROCESS tapDelay_2_process;

  tapOutData_2(0 TO 3) <= tapDelay_2_reg(0 TO 3);
  tapOutData_2(4) <= dataIn_1;

  tapOutData_2_0 <= tapOutData_2(0);

  preAdd2_stage1_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_1 <= tapOutData_2_0;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_1_reg_process;


  dataIn_3 <= signed(dataIn(3));

  tapDelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        tapDelay_4_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND processData = '1' THEN
        tapDelay_4_reg(3) <= dataIn_3;
        tapDelay_4_reg(0 TO 2) <= tapDelay_4_reg(1 TO 3);
      END IF;
    END IF;
  END PROCESS tapDelay_4_process;

  tapOutData_4(0 TO 3) <= tapDelay_4_reg(0 TO 3);
  tapOutData_4(4) <= dataIn_3;

  tapOutData_4_0 <= tapOutData_4(0);

  preAdd2_stage1_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_2 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_2 <= tapOutData_4_0;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_2_reg_process;


  preAdd2_stage1_add_1 <= resize(preAdd2_stage1_1, 21) + resize(preAdd2_stage1_2, 21);

  preAdd2_stage2_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage2_1 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd2_stage2_1 <= preAdd2_stage1_add_1;
      END IF;
    END IF;
  END PROCESS preAdd2_stage2_1_reg_process;


  tapOutData_1_1 <= tapOutData_1(1);

  preAdd2_stage1_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_3 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_3 <= tapOutData_1_1;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_3_reg_process;


  tapOutData_5_1 <= tapOutData_5(1);

  preAdd2_stage1_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_4 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_4 <= tapOutData_5_1;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_4_reg_process;


  preAdd2_stage1_add_2 <= resize(preAdd2_stage1_3, 21) + resize(preAdd2_stage1_4, 21);

  preAdd2_stage2_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage2_2 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd2_stage2_2 <= preAdd2_stage1_add_2;
      END IF;
    END IF;
  END PROCESS preAdd2_stage2_2_reg_process;


  preAdd2_stage2_add_1 <= resize(preAdd2_stage2_1, 22) + resize(preAdd2_stage2_2, 22);

  preAdd2_stage3_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage3_1 <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd2_stage3_1 <= preAdd2_stage2_add_1;
      END IF;
    END IF;
  END PROCESS preAdd2_stage3_1_reg_process;


  tapOutData_1_3 <= tapOutData_1(3);

  preAdd2_stage1_5_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_5 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_5 <= tapOutData_1_3;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_5_reg_process;


  tapOutData_5_3 <= tapOutData_5(3);

  preAdd2_stage1_6_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_6 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_6 <= tapOutData_5_3;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_6_reg_process;


  preAdd2_stage1_add_3 <= resize(preAdd2_stage1_5, 21) + resize(preAdd2_stage1_6, 21);

  preAdd2_stage2_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage2_3 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd2_stage2_3 <= preAdd2_stage1_add_3;
      END IF;
    END IF;
  END PROCESS preAdd2_stage2_3_reg_process;


  tapOutData_2_4 <= tapOutData_2(4);

  preAdd2_stage1_7_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_7 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_7 <= tapOutData_2_4;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_7_reg_process;


  tapOutData_4_4 <= tapOutData_4(4);

  preAdd2_stage1_8_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage1_8 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd2_stage1_8 <= tapOutData_4_4;
      END IF;
    END IF;
  END PROCESS preAdd2_stage1_8_reg_process;


  preAdd2_stage1_add_4 <= resize(preAdd2_stage1_7, 21) + resize(preAdd2_stage1_8, 21);

  preAdd2_stage2_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage2_4 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd2_stage2_4 <= preAdd2_stage1_add_4;
      END IF;
    END IF;
  END PROCESS preAdd2_stage2_4_reg_process;


  preAdd2_stage2_add_2 <= resize(preAdd2_stage2_3, 22) + resize(preAdd2_stage2_4, 22);

  preAdd2_stage3_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_stage3_2 <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd2_stage3_2 <= preAdd2_stage2_add_2;
      END IF;
    END IF;
  END PROCESS preAdd2_stage3_2_reg_process;


  preAdd2_stage3_add_1 <= resize(preAdd2_stage3_1, 23) + resize(preAdd2_stage3_2, 23);

  preAdd2_final_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd2_final_reg <= to_signed(16#000000#, 23);
      ELSIF enb = '1' THEN
        preAdd2_final_reg <= preAdd2_stage3_add_1;
      END IF;
    END IF;
  END PROCESS preAdd2_final_process;


  multInDelay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multInDelay2_reg <= (OTHERS => to_signed(16#000000#, 23));
      ELSIF enb = '1' THEN
        multInDelay2_reg(0) <= preAdd2_final_reg;
        multInDelay2_reg(1) <= multInDelay2_reg(0);
      END IF;
    END IF;
  END PROCESS multInDelay2_process;

  multInReg2 <= multInDelay2_reg(1);

  gain_mul_temp_1 <= to_signed(16#03EB4#, 17) * multInReg2;
  multOut2 <= gain_mul_temp_1(38 DOWNTO 0);

  multOutDelay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multOutDelay2_reg <= (OTHERS => to_signed(0, 39));
      ELSIF enb = '1' THEN
        multOutDelay2_reg(0) <= multOut2;
        multOutDelay2_reg(1) <= multOutDelay2_reg(0);
      END IF;
    END IF;
  END PROCESS multOutDelay2_process;

  multOutReg2 <= multOutDelay2_reg(1);

  add_stage1_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage1_2 <= to_signed(0, 39);
      ELSIF enb = '1' THEN
        add_stage1_2 <= multOutReg2;
      END IF;
    END IF;
  END PROCESS add_stage1_2_reg_process;


  adder_add_cast <= resize(add_stage1_1, 40);
  adder_add_cast_1 <= resize(add_stage1_2, 40);
  add_stage1_add_1 <= adder_add_cast + adder_add_cast_1;

  add_stage2_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage2_1 <= to_signed(0, 40);
      ELSIF enb = '1' THEN
        add_stage2_1 <= add_stage1_add_1;
      END IF;
    END IF;
  END PROCESS add_stage2_1_reg_process;


  dataIn_2 <= signed(dataIn(2));

  tapDelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        tapDelay_3_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' AND processData = '1' THEN
        tapDelay_3_reg(3) <= dataIn_2;
        tapDelay_3_reg(0 TO 2) <= tapDelay_3_reg(1 TO 3);
      END IF;
    END IF;
  END PROCESS tapDelay_3_process;

  tapOutData_3(0 TO 3) <= tapDelay_3_reg(0 TO 3);
  tapOutData_3(4) <= dataIn_2;

  tapOutData_3_0 <= tapOutData_3(0);

  preAdd3_stage1_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_stage1_1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd3_stage1_1 <= tapOutData_3_0;
      END IF;
    END IF;
  END PROCESS preAdd3_stage1_1_reg_process;


  tapOutData_1_2 <= tapOutData_1(2);

  preAdd3_stage1_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_stage1_2 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd3_stage1_2 <= tapOutData_1_2;
      END IF;
    END IF;
  END PROCESS preAdd3_stage1_2_reg_process;


  preAdd3_stage1_add_1 <= resize(preAdd3_stage1_1, 21) + resize(preAdd3_stage1_2, 21);

  preAdd3_stage2_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_stage2_1 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd3_stage2_1 <= preAdd3_stage1_add_1;
      END IF;
    END IF;
  END PROCESS preAdd3_stage2_1_reg_process;


  tapOutData_5_2 <= tapOutData_5(2);

  preAdd3_stage1_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_stage1_3 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd3_stage1_3 <= tapOutData_5_2;
      END IF;
    END IF;
  END PROCESS preAdd3_stage1_3_reg_process;


  tapOutData_3_4 <= tapOutData_3(4);

  preAdd3_stage1_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_stage1_4 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd3_stage1_4 <= tapOutData_3_4;
      END IF;
    END IF;
  END PROCESS preAdd3_stage1_4_reg_process;


  preAdd3_stage1_add_2 <= resize(preAdd3_stage1_3, 21) + resize(preAdd3_stage1_4, 21);

  preAdd3_stage2_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_stage2_2 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd3_stage2_2 <= preAdd3_stage1_add_2;
      END IF;
    END IF;
  END PROCESS preAdd3_stage2_2_reg_process;


  preAdd3_stage2_add_1 <= resize(preAdd3_stage2_1, 22) + resize(preAdd3_stage2_2, 22);

  preAdd3_final_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_final_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd3_final_reg <= preAdd3_stage2_add_1;
      END IF;
    END IF;
  END PROCESS preAdd3_final_process;


  preAdd3_balance_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd3_balance_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd3_balance_reg <= preAdd3_final_reg;
      END IF;
    END IF;
  END PROCESS preAdd3_balance_process;


  multInDelay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multInDelay3_reg <= (OTHERS => to_signed(16#000000#, 22));
      ELSIF enb = '1' THEN
        multInDelay3_reg(0) <= preAdd3_balance_reg;
        multInDelay3_reg(1) <= multInDelay3_reg(0);
      END IF;
    END IF;
  END PROCESS multInDelay3_process;

  multInReg3 <= multInDelay3_reg(1);

  gain_mul_temp_2 <= to_signed(16#04B12#, 17) * multInReg3;
  multOut3 <= gain_mul_temp_2(37 DOWNTO 0);

  multOutDelay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multOutDelay3_reg <= (OTHERS => to_signed(0, 38));
      ELSIF enb = '1' THEN
        multOutDelay3_reg(0) <= multOut3;
        multOutDelay3_reg(1) <= multOutDelay3_reg(0);
      END IF;
    END IF;
  END PROCESS multOutDelay3_process;

  multOutReg3 <= multOutDelay3_reg(1);

  add_stage1_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage1_3 <= to_signed(0, 38);
      ELSIF enb = '1' THEN
        add_stage1_3 <= multOutReg3;
      END IF;
    END IF;
  END PROCESS add_stage1_3_reg_process;


  tapOutData_2_1 <= tapOutData_2(1);

  preAdd4_stage1_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_stage1_1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd4_stage1_1 <= tapOutData_2_1;
      END IF;
    END IF;
  END PROCESS preAdd4_stage1_1_reg_process;


  tapOutData_4_1 <= tapOutData_4(1);

  preAdd4_stage1_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_stage1_2 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd4_stage1_2 <= tapOutData_4_1;
      END IF;
    END IF;
  END PROCESS preAdd4_stage1_2_reg_process;


  preAdd4_stage1_add_1 <= resize(preAdd4_stage1_1, 21) + resize(preAdd4_stage1_2, 21);

  preAdd4_stage2_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_stage2_1 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd4_stage2_1 <= preAdd4_stage1_add_1;
      END IF;
    END IF;
  END PROCESS preAdd4_stage2_1_reg_process;


  tapOutData_2_3 <= tapOutData_2(3);

  preAdd4_stage1_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_stage1_3 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd4_stage1_3 <= tapOutData_2_3;
      END IF;
    END IF;
  END PROCESS preAdd4_stage1_3_reg_process;


  tapOutData_4_3 <= tapOutData_4(3);

  preAdd4_stage1_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_stage1_4 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd4_stage1_4 <= tapOutData_4_3;
      END IF;
    END IF;
  END PROCESS preAdd4_stage1_4_reg_process;


  preAdd4_stage1_add_2 <= resize(preAdd4_stage1_3, 21) + resize(preAdd4_stage1_4, 21);

  preAdd4_stage2_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_stage2_2 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd4_stage2_2 <= preAdd4_stage1_add_2;
      END IF;
    END IF;
  END PROCESS preAdd4_stage2_2_reg_process;


  preAdd4_stage2_add_1 <= resize(preAdd4_stage2_1, 22) + resize(preAdd4_stage2_2, 22);

  preAdd4_final_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_final_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd4_final_reg <= preAdd4_stage2_add_1;
      END IF;
    END IF;
  END PROCESS preAdd4_final_process;


  preAdd4_balance_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd4_balance_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd4_balance_reg <= preAdd4_final_reg;
      END IF;
    END IF;
  END PROCESS preAdd4_balance_process;


  multInDelay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multInDelay4_reg <= (OTHERS => to_signed(16#000000#, 22));
      ELSIF enb = '1' THEN
        multInDelay4_reg(0) <= preAdd4_balance_reg;
        multInDelay4_reg(1) <= multInDelay4_reg(0);
      END IF;
    END IF;
  END PROCESS multInDelay4_process;

  multInReg4 <= multInDelay4_reg(1);

  gain_mul_temp_3 <= to_signed(16#06B9A#, 17) * multInReg4;
  multOut4 <= gain_mul_temp_3(37 DOWNTO 0);

  multOutDelay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multOutDelay4_reg <= (OTHERS => to_signed(0, 38));
      ELSIF enb = '1' THEN
        multOutDelay4_reg(0) <= multOut4;
        multOutDelay4_reg(1) <= multOutDelay4_reg(0);
      END IF;
    END IF;
  END PROCESS multOutDelay4_process;

  multOutReg4 <= multOutDelay4_reg(1);

  add_stage1_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage1_4 <= to_signed(0, 38);
      ELSIF enb = '1' THEN
        add_stage1_4 <= multOutReg4;
      END IF;
    END IF;
  END PROCESS add_stage1_4_reg_process;


  adder_add_cast_2 <= resize(add_stage1_3, 39);
  adder_add_cast_3 <= resize(add_stage1_4, 39);
  add_stage1_add_2 <= adder_add_cast_2 + adder_add_cast_3;

  add_stage2_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage2_2 <= to_signed(0, 39);
      ELSIF enb = '1' THEN
        add_stage2_2 <= add_stage1_add_2;
      END IF;
    END IF;
  END PROCESS add_stage2_2_reg_process;


  adder_add_cast_4 <= resize(add_stage2_1, 41);
  adder_add_cast_5 <= resize(add_stage2_2, 41);
  add_stage2_add_1 <= adder_add_cast_4 + adder_add_cast_5;

  add_stage3_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage3_1 <= to_signed(0, 41);
      ELSIF enb = '1' THEN
        add_stage3_1 <= add_stage2_add_1;
      END IF;
    END IF;
  END PROCESS add_stage3_1_reg_process;


  tapOutData_3_1 <= tapOutData_3(1);

  preAdd5_stage1_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_stage1_1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd5_stage1_1 <= tapOutData_3_1;
      END IF;
    END IF;
  END PROCESS preAdd5_stage1_1_reg_process;


  tapOutData_2_2 <= tapOutData_2(2);

  preAdd5_stage1_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_stage1_2 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd5_stage1_2 <= tapOutData_2_2;
      END IF;
    END IF;
  END PROCESS preAdd5_stage1_2_reg_process;


  preAdd5_stage1_add_1 <= resize(preAdd5_stage1_1, 21) + resize(preAdd5_stage1_2, 21);

  preAdd5_stage2_1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_stage2_1 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd5_stage2_1 <= preAdd5_stage1_add_1;
      END IF;
    END IF;
  END PROCESS preAdd5_stage2_1_reg_process;


  tapOutData_4_2 <= tapOutData_4(2);

  preAdd5_stage1_3_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_stage1_3 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd5_stage1_3 <= tapOutData_4_2;
      END IF;
    END IF;
  END PROCESS preAdd5_stage1_3_reg_process;


  tapOutData_3_3 <= tapOutData_3(3);

  preAdd5_stage1_4_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_stage1_4 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        preAdd5_stage1_4 <= tapOutData_3_3;
      END IF;
    END IF;
  END PROCESS preAdd5_stage1_4_reg_process;


  preAdd5_stage1_add_2 <= resize(preAdd5_stage1_3, 21) + resize(preAdd5_stage1_4, 21);

  preAdd5_stage2_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_stage2_2 <= to_signed(16#000000#, 21);
      ELSIF enb = '1' THEN
        preAdd5_stage2_2 <= preAdd5_stage1_add_2;
      END IF;
    END IF;
  END PROCESS preAdd5_stage2_2_reg_process;


  preAdd5_stage2_add_1 <= resize(preAdd5_stage2_1, 22) + resize(preAdd5_stage2_2, 22);

  preAdd5_final_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_final_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd5_final_reg <= preAdd5_stage2_add_1;
      END IF;
    END IF;
  END PROCESS preAdd5_final_process;


  preAdd5_balance_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd5_balance_reg <= to_signed(16#000000#, 22);
      ELSIF enb = '1' THEN
        preAdd5_balance_reg <= preAdd5_final_reg;
      END IF;
    END IF;
  END PROCESS preAdd5_balance_process;


  multInDelay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multInDelay5_reg <= (OTHERS => to_signed(16#000000#, 22));
      ELSIF enb = '1' THEN
        multInDelay5_reg(0) <= preAdd5_balance_reg;
        multInDelay5_reg(1) <= multInDelay5_reg(0);
      END IF;
    END IF;
  END PROCESS multInDelay5_process;

  multInReg5 <= multInDelay5_reg(1);

  gain_mul_temp_4 <= to_signed(16#080D2#, 17) * multInReg5;
  multOut5 <= gain_mul_temp_4(37 DOWNTO 0);

  multOutDelay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multOutDelay5_reg <= (OTHERS => to_signed(0, 38));
      ELSIF enb = '1' THEN
        multOutDelay5_reg(0) <= multOut5;
        multOutDelay5_reg(1) <= multOutDelay5_reg(0);
      END IF;
    END IF;
  END PROCESS multOutDelay5_process;

  multOutReg5 <= multOutDelay5_reg(1);

  add_stage1_5_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage1_5 <= to_signed(0, 38);
      ELSIF enb = '1' THEN
        add_stage1_5 <= multOutReg5;
      END IF;
    END IF;
  END PROCESS add_stage1_5_reg_process;


  tapOutData_3_2 <= tapOutData_3(2);

  preAdd6_balance_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        preAdd6_balance_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' THEN
        preAdd6_balance_reg(0) <= tapOutData_3_2;
        preAdd6_balance_reg(1 TO 3) <= preAdd6_balance_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS preAdd6_balance_process;

  preAdd6_balance_reg_1 <= preAdd6_balance_reg(3);

  multInDelay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multInDelay6_reg <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' THEN
        multInDelay6_reg(0) <= preAdd6_balance_reg_1;
        multInDelay6_reg(1) <= multInDelay6_reg(0);
      END IF;
    END IF;
  END PROCESS multInDelay6_process;

  multInReg6 <= multInDelay6_reg(1);

  gain_mul_temp_5 <= to_signed(16#09A3A#, 17) * multInReg6;
  multOut6 <= gain_mul_temp_5(35 DOWNTO 0);

  multOutDelay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        multOutDelay6_reg <= (OTHERS => to_signed(0, 36));
      ELSIF enb = '1' THEN
        multOutDelay6_reg(0) <= multOut6;
        multOutDelay6_reg(1) <= multOutDelay6_reg(0);
      END IF;
    END IF;
  END PROCESS multOutDelay6_process;

  multOutReg6 <= multOutDelay6_reg(1);

  add_stage1_6_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage1_6 <= to_signed(0, 36);
      ELSIF enb = '1' THEN
        add_stage1_6 <= multOutReg6;
      END IF;
    END IF;
  END PROCESS add_stage1_6_reg_process;


  adder_add_cast_6 <= resize(add_stage1_5, 39);
  adder_add_cast_7 <= resize(add_stage1_6, 39);
  add_stage1_add_3 <= adder_add_cast_6 + adder_add_cast_7;

  add_stage2_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage2_3_reg <= to_signed(0, 39);
      ELSIF enb = '1' THEN
        add_stage2_3_reg <= add_stage1_add_3;
      END IF;
    END IF;
  END PROCESS add_stage2_3_process;


  add_stage3_2_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_stage3_2 <= to_signed(0, 39);
      ELSIF enb = '1' THEN
        add_stage3_2 <= add_stage2_3_reg;
      END IF;
    END IF;
  END PROCESS add_stage3_2_reg_process;


  adder_add_cast_8 <= resize(add_stage3_1, 42);
  adder_add_cast_9 <= resize(add_stage3_2, 42);
  add_stage3_add_1 <= adder_add_cast_8 + adder_add_cast_9;

  add_final_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        add_final_reg <= to_signed(0, 42);
      ELSIF enb = '1' THEN
        add_final_reg <= add_stage3_add_1;
      END IF;
    END IF;
  END PROCESS add_final_process;


  
  add_final_reg_conv <= X"7FFFF" WHEN ((add_final_reg(41) = '0') AND (add_final_reg(40 DOWNTO 38) /= "000")) OR ((add_final_reg(41) = '0') AND (add_final_reg(38 DOWNTO 19) = X"7FFFF")) ELSE
      X"80000" WHEN (add_final_reg(41) = '1') AND (add_final_reg(40 DOWNTO 38) /= "111") ELSE
      add_final_reg(38 DOWNTO 19) + ('0' & add_final_reg(18));

  dataOut_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        dataOut_tmp <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        dataOut_tmp <= add_final_reg_conv;
      END IF;
    END IF;
  END PROCESS dataOut_1_process;


  dataOut <= std_logic_vector(dataOut_tmp);

  -- Delay Vertical End
  validOut_tap_latency_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOut_tap_latency_reg <= (OTHERS => '0');
      ELSIF enb = '1' AND processData = '1' THEN
        validOut_tap_latency_reg(0) <= validIn;
        validOut_tap_latency_reg(1) <= validOut_tap_latency_reg(0);
      END IF;
    END IF;
  END PROCESS validOut_tap_latency_process;

  validIn_reg <= validOut_tap_latency_reg(1);

  validIn_reg_vldSig <= validIn_reg AND processData;

  -- Delay Vertical End
  validOut_fir_latency_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        validOut_fir_latency_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOut_fir_latency_reg(0) <= validIn_reg_vldSig;
        validOut_fir_latency_reg(1 TO 12) <= validOut_fir_latency_reg(0 TO 11);
      END IF;
    END IF;
  END PROCESS validOut_fir_latency_process;

  validOut <= validOut_fir_latency_reg(12);

END rtl;

